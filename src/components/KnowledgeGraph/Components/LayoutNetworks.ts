import { LayoutConfig } from '../../typings';

// More details about the layout configurations: https://g6.antv.vision/api/graph-layout/guide
const layouts: LayoutConfig[] = [
  {
    type: 'force',
    title: 'D3 gForce',
    options: [
      {
        key: 'preventOverlap',
        title: 'Prevent Overlap?',
        defaultValue: true,
        component: 'switch',
      },
      {
        key: 'linkDistance',
        title: 'Link Distance',
        defaultValue: 250,
        component: 'slider',
        min: 100,
        max: 500,
      },
      {
        key: 'nodeStrength',
        title: 'Node Strength',
        defaultValue: 30,
        component: 'slider',
        min: 10,
        max: 100,
      },
      {
        key: 'edgeStrength',
        title: 'Edge Strength',
        defaultValue: 0.1,
        component: 'slider',
        min: 0,
        max: 1,
      },
      {
        key: 'collideStrength',
        title: 'Collide Strength',
        defaultValue: 0.8,
        component: 'slider',
        max: 1,
        min: 0,
      },
    ],
  },
  {
    type: 'concentric',
    title: 'Concentric',
    options: [
      {
        component: 'slider',
        key: 'nodeSize',
        title: 'Node Size',
        defaultValue: 50,
        description: 'Node Size (Diameter) Used for Collision Detection to Prevent Node Overlap.',
      },
      {
        component: 'slider',
        key: 'minNodeSpacing',
        title: 'Min Node Spacing',
        defaultValue: 10,
        description: 'Minimum Spacing Between Rings to Adjust Radius, Default Value is 10.',
      },
      {
        component: 'switch',
        key: 'preventOverlap',
        title: 'Prevent Overlap?',
        defaultValue: true,
        description:
          'Prevent Overlapping, when set to true, it can avoid nodes overlapping with each other; nodeSize must be configured. Node collision detection will only occur when nodeSize is set to be consistent with node size.',
      },
      {
        component: 'slider',
        key: 'sweep',
        title: 'Sweep',
        defaultValue: undefined,
        min: 0,
        max: 10,
        description: 'Angular Difference Between the First Node and the Last Node.',
      },
      {
        component: 'switch',
        key: 'equidistant',
        title: 'Equidistant?',
        defaultValue: false,
        description:
          'Is the Distance Between Rings Equal, Default is False, Setting to True Creates Visual Uniformity',
      },
      {
        component: 'slider',
        key: 'startAngle',
        title: 'Start Angle',
        defaultValue: (3 / 2) * Math.PI,
        min: 0,
        max: 2 * Math.PI,
        step: 0.1 * Math.PI,
        description: 'The Default Starting Radian Value for Nodes is 3 / 2 * Math.PI.',
      },
      {
        component: 'switch',
        key: 'clockwise',
        title: 'Clockwise?',
        defaultValue: false,
        description: 'Is Arranged in Clockwise Direction, Default is False.',
      },
      {
        component: 'select',
        key: 'sortBy',
        title: 'Sort By',
        defaultValue: 'degree',
        enums: [
          { key: 'degree', value: 'degree' },
          { key: 'topology', value: 'topology' },
        ],
        description:
          "Specify the Sorting Criterion, i.e., a Node's Property Name; Higher Values Result in Nodes Being Placed More Centered.",
      },
    ],
  },
  {
    type: 'grid',
    options: [
      {
        component: 'slider',
        key: 'width',
        title: 'Width',
        defaultValue: 200,
        min: 10,
        max: 5000,
        description: 'The Width of the Layout',
      },
      {
        component: 'slider',
        key: 'height',
        title: 'Height',
        defaultValue: 200,
        min: 10,
        max: 5000,
        description: 'The Height of the Layout',
      },
      {
        component: 'switch',
        key: 'preventOverlap',
        title: 'Prevent Overlap?',
        defaultValue: false,
        description:
          'Prevent Node Overlap, when enabled, it avoids nodes from overlapping; it must be used in conjunction with the nodeSize property. Collision detection is only possible when the nodeSize is set to be the same size as the nodes in the graph.',
      },
      {
        component: 'slider',
        key: 'preventOverlapPadding',
        title: 'Prevent Overlap Padding',
        defaultValue: 10,
        min: 1,
        max: 100,
        description:
          'Spacing Value for Nodes When Avoiding Overlap, Active when preventOverlap is True',
      },
      {
        component: 'switch',
        key: 'condense',
        title: 'Condense?',
        defaultValue: false,
        description:
          'True for Utilizing the Minimum Canvas Space, False for Utilizing the Entire Available Canvas Size.',
      },
      {
        component: 'slider',
        key: 'rows',
        title: 'Grid Rows',
        defaultValue: 10,
        min: 1,
        max: 500,
        description: 'The Number of Rows in the Grid, Default is 10',
      },
      {
        component: 'slider',
        key: 'cols',
        title: 'Grid Columns',
        defaultValue: 10,
        min: 1,
        max: 500,
        description: 'The Number of Columns in the Grid, Default is 10',
      },
      {
        component: 'select',
        key: 'sortBy',
        title: 'Sort By',
        defaultValue: undefined,
        enums: [
          { key: null, value: null },
          { key: 'topology', value: 'topology' },
          { key: 'degree', value: 'degree' },
        ],
        description:
          "Specify the Sorting Criterion, i.e., based on which node property the sorting is performed; higher values result in nodes being placed more centrally. If not specified, the node's degree will be calculated, and nodes with higher degrees will be placed more centrally.",
      },
    ],
    title: 'Grid Layout',
  },
  {
    type: 'radial',
    options: [
      {
        component: 'slider',
        key: 'linkDistance',
        title: 'Link Distance',
        defaultValue: 100,
        min: 10,
        max: 500,
        description: 'The Link Distance Between Two Adjacent Nodes.',
      },
      {
        component: 'slider',
        key: 'maxIteration',
        title: 'Max Iteration',
        defaultValue: 1000,
        min: 100,
        max: 10000,
        description:
          "The Maximum Number of Iterations. If you don't want to wait too long, you can set a smaller value.",
      },
      {
        component: 'switch',
        key: 'preventOverlap',
        title: 'Prevent Overlap?',
        defaultValue: false,
        description: 'Whether to Prevent Node Overlap.',
      },
      {
        component: 'slider',
        key: 'nodeSize',
        title: 'Node Size',
        defaultValue: 30,
        min: 10,
        max: 100,
        description: 'The Size of the Node, Used for Collision Detection to Prevent Node Overlap.',
      },
      {
        component: 'slider',
        key: 'nodeSpacing',
        title: 'Node Spacing',
        defaultValue: 10,
        min: 0,
        max: 100,
        description:
          'The Spacing Between Nodes. It is only valid when the preventOverlap property is true.',
      },
      {
        component: 'slider',
        key: 'unitRadius',
        title: 'Unit Radius',
        defaultValue: 100,
        min: 10,
        max: 500,
        description: 'The Radius of the Circle.',
      },
      {
        component: 'switch',
        key: 'strictRadial',
        title: 'Strict Radial?',
        defaultValue: false,
        description:
          'Whether the Layout is Strictly Radial. It is only valid when the preventOverlap property is true. When you set it to true, the overlaped nodes will be shown in the side of the circle for a better visual effect.',
      },
      {
        component: 'select',
        key: 'sortBy',
        title: 'Sort By',
        defaultValue: undefined,
        enums: [
          { key: null, value: null },
          { key: 'data', value: 'data' },
          { key: 'nlabel', value: 'nlabel' },
          { key: 'name', value: 'name' },
        ],
        description:
          'The Property of the Node Used for Sorting. The nodes in the same layer will be sorted by this property. All nodes have the closer value will be placed in the same layer as much as possible.',
      },
      {
        component: 'slider',
        key: 'sortStrength',
        title: 'Sort Strength',
        defaultValue: 100,
        min: 0,
        max: 1000,
        description: 'The Strength of the Force Applied to the Node.',
      },
      {
        component: 'switch',
        key: 'workerEnabled',
        title: 'Worker Enabled?',
        defaultValue: false,
        description: 'Whether to Enable Web Worker for Layout Calculation to Improve Performance.',
      },
    ],
    title: 'Radial Layout',
  },
  {
    type: 'dagre',
    options: [
      {
        component: 'select',
        key: 'rankdir',
        title: 'Layout Direction',
        defaultValue: 'TB',
        enums: [
          { key: 'TB', value: 'TB' },
          { key: 'BT', value: 'BT' },
          { key: 'LR', value: 'LR' },
          { key: 'RL', value: 'RL' },
        ],
        description:
          'Layout Direction, Default is TB, which means top to bottom layout. TB represents top to bottom layout, BT represents bottom to top layout, LR represents left to right layout, and RL represents right to left layout.',
      },
      {
        component: 'select',
        key: 'align',
        title: 'Node Alignment',
        defaultValue: undefined,
        enums: [
          { key: null, value: null },
          { key: 'UL', value: 'UL' },
          { key: 'UR', value: 'UR' },
          { key: 'DL', value: 'DL' },
          { key: 'DR', value: 'DR' },
        ],
        description:
          'Node Alignment, Default is UL, meaning aligned to the upper-left corner. UL represents alignment to the upper-left corner, UR represents alignment to the upper-right corner, DL represents alignment to the lower-left corner, and DR represents alignment to the lower-right corner.',
      },
      {
        component: 'slider',
        key: 'nodeSize',
        title: 'Node Size',
        defaultValue: 0,
        max: 200,
        min: 0,
        description:
          'Node Size, Default is 0, which means the node size is automatically calculated based on the node label.',
      },
      {
        component: 'slider',
        key: 'nodesep',
        title: 'Node Spacing',
        defaultValue: 10,
        max: 200,
        min: 1,
        description:
          'Node Spacing, horizontal spacing when rankdir is TB or BT, and vertical spacing when rankdir is LR or RL.',
      },
      {
        component: 'input',
        key: 'ranksep',
        title: 'Rank Spacing',
        defaultValue: 10,
        max: 200,
        min: 1,
        description:
          'Spacing Between Layers, vertical spacing between adjacent layers when rankdir is TB or BT, and horizontal spacing between adjacent layers when rankdir is LR or RL.',
      },
    ],
    title: 'Dagre Layout',
  },
  {
    type: 'circular',
    options: [
      {
        component: 'slider',
        key: 'radius',
        title: 'Radius',
        defaultValue: undefined,
        min: 10,
        max: 500,
        description:
          'The Radius of the Circular Layout. If you set the radius, then the startRadius and endRadius will be ignored.',
      },
      {
        component: 'slider',
        key: 'startRadius',
        title: 'Start Radius',
        defaultValue: undefined,
        min: 10,
        max: 500,
        description: 'The Radius of the First Circle.',
      },
      {
        component: 'slider',
        key: 'endRadius',
        title: 'End Radius',
        defaultValue: undefined,
        min: 10,
        max: 500,
        description: 'The Radius of the Last Circle.',
      },
      {
        component: 'switch',
        key: 'clockwise',
        title: 'Clockwise?',
        defaultValue: true,
        description: 'Whether the Layout is Clockwise.',
      },
      {
        component: 'select',
        key: 'ordering',
        title: 'Ordering',
        defaultValue: 'degree',
        enums: [
          { key: 'null', value: null },
          { key: 'degree', value: 'degree' },
          { key: 'topology', value: 'topology' },
        ],
        description: 'The Sorting Criterion of the Circular Layout.',
      },
      {
        component: 'switch',
        key: 'workerEnabled',
        title: 'Worker Enabled?',
        defaultValue: false,
        description: 'Whether to Enable Web Worker for Layout Calculation to Improve Performance.',
      },
    ],
    title: 'Circular Layout',
  },

  {
    type: 'gForce',
    options: [
      {
        component: 'select',
        key: 'preset',
        title: 'Preset',
        defaultValue: 'random',
        enums: [
          { key: 'random', value: 'random' },
          { key: 'grid', value: 'grid' },
          { key: 'concentric', value: 'concentric' },
          { key: 'circular', value: 'circular' },
          { key: 'radial', value: 'radial' },
          { key: 'dagre', value: 'dagre' },
        ],
        description:
          'The Preset Layout, Default is Random. The Preset Layout Will Be Used to Initialize the Nodes Before the Force Simulation Starts. Good Initialization Can Shorten the Layout Time.',
      },
      {
        component: 'slider',
        key: 'linkDistance',
        title: 'Link Distance',
        defaultValue: 100,
        min: 10,
        max: 500,
        description: 'The Link Distance Between Two Adjacent Nodes.',
      },
      {
        component: 'slider',
        key: 'nodeStrength',
        title: 'Node Strength',
        defaultValue: 1000,
        min: 100,
        max: 10000,
        description: 'The Strength of the Force Applied to the Node.',
      },
      {
        component: 'slider',
        key: 'edgeStrength',
        title: 'Edge Strength',
        defaultValue: 100,
        min: 100,
        max: 10000,
        description: 'The Strength of the Force Applied to the Edge.',
      },
      {
        component: 'switch',
        key: 'preventOverlap',
        title: 'Prevent Overlap?',
        defaultValue: false,
        description: 'Whether to Prevent Node Overlap.',
      },
      {
        component: 'slider',
        key: 'nodeSize',
        title: 'Node Size',
        defaultValue: 30,
        min: 10,
        max: 100,
        description: 'The Size of the Node, Used for Collision Detection to Prevent Node Overlap.',
      },
      {
        component: 'slider',
        key: 'nodeSpacing',
        title: 'Node Spacing',
        defaultValue: 10,
        min: 0,
        max: 100,
        description:
          'The Spacing Between Nodes. It is only valid when the preventOverlap property is true.',
      },
      {
        component: 'slider',
        key: 'minMovement',
        title: 'Min Movement',
        defaultValue: 0.5,
        min: 0,
        max: 10,
        description:
          'The Minimum Movement of the Node. When the Node Movement is Less Than this Value, the Layout Stops.',
      },
      {
        component: 'slider',
        key: 'maxIteration',
        title: 'Max Iteration',
        defaultValue: 1000,
        min: 100,
        max: 10000,
        description:
          "The Maximum Number of Iterations. If you don't want to wait too long, you can set a smaller value.",
      },
      {
        component: 'switch',
        key: 'workerEnabled',
        title: 'Worker Enabled?',
        defaultValue: false,
        description: 'Whether to Enable Web Worker for Layout Calculation to Improve Performance.',
      },
    ],
    title: 'G6 gForce',
  },
  {
    type: 'mds',
    options: [
      {
        component: 'slider',
        key: 'linkDistance',
        title: 'Link Distance',
        defaultValue: 100,
        min: 10,
        max: 500,
        description: 'The Link Distance Between Two Adjacent Nodes.',
      },
      {
        component: 'switch',
        key: 'workerEnabled',
        title: 'Worker Enabled?',
        defaultValue: false,
        description: 'Whether to Enable Web Worker for Layout Calculation to Improve Performance.',
      },
    ],
    title: 'MDS Layout',
  },
  {
    type: 'random',
    options: [
      {
        component: 'switch',
        key: 'workerEnabled',
        title: 'Worker Enabled?',
        defaultValue: false,
        description: 'Whether to Enable Web Worker for Layout Calculation to Improve Performance.',
      },
    ],
    title: 'Random Layout',
  },
  {
    type: 'force2',
    options: [
      {
        component: 'switch',
        key: 'animate',
        title: 'Animate?',
        defaultValue: false,
        description:
          'Whether to Enable Animation. If Enabled, the Layout Will Be Animated to the Final State. But you can not change the layout during the animation until the animation ends.',
      },
      {
        component: 'select',
        key: 'preset',
        title: 'Preset',
        defaultValue: 'random',
        enums: [
          { key: 'random', value: 'random' },
          { key: 'grid', value: 'grid' },
          { key: 'concentric', value: 'concentric' },
          { key: 'circular', value: 'circular' },
          { key: 'radial', value: 'radial' },
          { key: 'dagre', value: 'dagre' },
        ],
        description:
          'The Preset Layout, Default is Random. The Preset Layout Will Be Used to Initialize the Nodes Before the Force Simulation Starts. Good Initialization Can Shorten the Layout Time.',
      },
      {
        component: 'slider',
        key: 'linkDistance',
        title: 'Link Distance',
        defaultValue: 100,
        min: 10,
        max: 500,
        description: 'The Link Distance Between Two Adjacent Nodes.',
      },
      {
        component: 'slider',
        key: 'nodeStrength',
        title: 'Node Strength',
        defaultValue: 1000,
        min: 100,
        max: 10000,
        description: 'The Strength of the Force Applied to the Node.',
      },
      {
        component: 'slider',
        key: 'edgeStrength',
        title: 'Edge Strength',
        defaultValue: 100,
        min: 100,
        max: 10000,
        description: 'The Strength of the Force Applied to the Edge.',
      },
      {
        component: 'switch',
        key: 'preventOverlap',
        title: 'Prevent Overlap?',
        defaultValue: false,
        description: 'Whether to Prevent Node Overlap.',
      },
      {
        component: 'slider',
        key: 'nodeSize',
        title: 'Node Size',
        defaultValue: 30,
        min: 10,
        max: 100,
        description: 'The Size of the Node, Used for Collision Detection to Prevent Node Overlap.',
      },
      {
        component: 'slider',
        key: 'nodeSpacing',
        title: 'Node Spacing',
        defaultValue: 10,
        min: 0,
        max: 100,
        description:
          'The Spacing Between Nodes. It is only valid when the preventOverlap property is true.',
      },
      {
        component: 'slider',
        key: 'minMovement',
        title: 'Min Movement',
        defaultValue: 0.5,
        min: 0,
        max: 10,
        description:
          'The Minimum Movement of the Node. When the Node Movement is Less Than this Value, the Layout Stops.',
      },
      {
        component: 'slider',
        key: 'maxIteration',
        title: 'Max Iteration',
        defaultValue: 1000,
        min: 100,
        max: 10000,
        description:
          "The Maximum Number of Iterations. If you don't want to wait too long, you can set a smaller value.",
      },
      {
        component: 'switch',
        key: 'clustering',
        title: 'Clustering?',
        defaultValue: false,
        description:
          'Whether to Enable Clustering. If Enabled, the Nodes Will Be Clustered Together.',
      },
      {
        component: 'select',
        key: 'nodeClusterBy',
        title: 'Node Cluster By',
        defaultValue: undefined,
        enums: [
          { key: null, value: null },
          { key: 'nlabel', value: 'Label' },
        ],
        description: 'The Property of the Node Used for Clustering.',
      },
      {
        component: 'switch',
        key: 'workerEnabled',
        title: 'Worker Enabled?',
        defaultValue: false,
        description: 'Whether to Enable Web Worker for Layout Calculation to Improve Performance.',
      },
    ],
    title: 'Progressive gForce',
  },
  {
    type: 'fruchterman',
    title: 'Fruchterman Layout',
    options: [
      {
        component: 'select',
        key: 'preset',
        title: 'Preset',
        defaultValue: 'random',
        enums: [
          { key: 'random', value: 'random' },
          { key: 'grid', value: 'grid' },
          { key: 'concentric', value: 'concentric' },
          { key: 'circular', value: 'circular' },
          { key: 'radial', value: 'radial' },
          { key: 'dagre', value: 'dagre' },
        ],
        description:
          'The Preset Layout, Default is Random. The Preset Layout Will Be Used to Initialize the Nodes Before the Force Simulation Starts. Good Initialization Can Shorten the Layout Time.',
      },
      {
        component: 'slider',
        key: 'gravity',
        title: 'Gravity',
        defaultValue: 10,
        min: 0,
        max: 100,
        description: 'The Strength of the Force Applied to the Node.',
      },
      {
        component: 'slider',
        key: 'speed',
        title: 'Speed',
        defaultValue: 1,
        min: 0,
        max: 10,
        description: 'The Speed of the Force Simulation.',
      },
      {
        component: 'slider',
        key: 'maxIteration',
        title: 'Max Iteration',
        defaultValue: 1000,
        min: 100,
        max: 10000,
        description:
          "The Maximum Number of Iterations. If you don't want to wait too long, you can set a smaller value.",
      },
      {
        component: 'switch',
        key: 'clustering',
        title: 'Clustering?',
        defaultValue: false,
        description:
          'Whether to Enable Clustering. If Enabled, the Nodes Will Be Clustered Together.',
      },
      {
        component: 'slider',
        key: 'clusterGravity',
        title: 'Cluster Gravity',
        defaultValue: 10,
        min: 0,
        max: 100,
        description: 'The Strength of the Force Applied to the Cluster.',
      },
      {
        component: 'switch',
        key: 'workerEnabled',
        title: 'Worker Enabled?',
        defaultValue: false,
        description: 'Whether to Enable Web Worker for Layout Calculation to Improve Performance.',
      },
    ],
  },
  {
    type: 'preset',
    title: 'Preset Layout',
    options: undefined,
  },
];

export default layouts;
